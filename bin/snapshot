#!/usr/bin/env python
'''
usage: snapshot [-h] [--host HOST] [--port PORT] [--database DATABASE]
                     [--user USER] [--password PASSWORD]
                     [--table-prefix PREFIX]
                     [--updates [UPDATES [UPDATES ...]]]
                     command

Save and restore MySQL databases

positional arguments:
  command               a command to run

optional arguments:
  -h, --help            show this help message and exit
  --version             show the version string and exit
  --host HOST           database host
  --port PORT           database port
  --database DATABASE   database name
  --user USER           database user
  --password PASSWORD   database password
  --table-prefix PREFIX
                        backup tables starting with PREFIX
  --updates [UPDATES [UPDATES ...]]
                        SQL query file to apply after restore
'''

from __future__ import print_function
import sys
import argparse
from snapshot import commands

parser = argparse.ArgumentParser(description='Save and restore MySQL databases')
parser.add_argument('command', type=str, nargs='?', help='a command to run')
parser.add_argument('--version', action='store_const', const=True, help='show the version string and exit')
parser.add_argument('--host', dest='host', type=str, help='database host')
parser.add_argument('--port', dest='port', default='3306', type=str, help='database port')
parser.add_argument('--database', dest='database', type=str, help='database name')
parser.add_argument('--user', dest='user', type=str, help='database user')
parser.add_argument('--password', dest='password', type=str, help='database password')

# Arguments for backups
parser.add_argument('--table-prefix', dest='prefix', default=None, type=str, help='backup tables starting with PREFIX')

# Arguments for restores
parser.add_argument('--updates', dest='updates', nargs='*', type=argparse.FileType('rb'), help='SQL query file to apply after restore')

args = parser.parse_args()

if args.version == True:
    print('snapshot ' + snapshot.__version__)
    sys.exit()
elif args.command is None:
    parser.print_help()
    sys.exit()

if args.command == 'backup':
    print('Backing up mysql://%s:%s/%s ...' % (args.host, args.port, args.database), file=sys.stderr)
    commands.backup(args.host, args.port, args.database, args.user, args.password, table_prefix=args.prefix)
elif args.command == 'restore':
    print('Restoring mysql://%s:%s/%s ...' % (args.host, args.port, args.database), file=sys.stderr)
    load(args.host, args.port, args.user, args.password, args.database)

    if args.updates:
        print('Running update scripts ...', file=sys.stderr)
        for file in args.updates:
            commands.update(args.host, args.port, args.user, args.password, args.database, file)
